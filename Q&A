1. Implement a function that checks whether a given string is a palindrome or not.
Ans->  use std::io;
fn main() {
    println!("Enter a string: ");
    let mut input = String::new();
    io::stdin().read_line(&mut input).unwrap_or_else(|_| {
        panic!("Failed to read line");
    }
);

    let input = input.trim();

    if is_palindrome(input) {
        println!("'{}' is a palindrome", input);
    } else {
        println!("'{}' is not a palindrome", input);
    }
}

fn is_palindrome(input: &str) -> bool {
    input.chars().eq(input.chars().rev())
}
2. Given a sorted array of integers, implement a function that returns the index of the first occurrence of a given number.
Ans-> fn first_occurrence_index(arr: &[i32], target: i32) -> Option<usize> {
    let mut low = 0;
    let mut high = arr.len() - 1;
    let mut result = None;

    while low <= high {
        let mid = low + (high - low) / 2;
        if arr[mid] == target {
            result = Some(mid);
            high = mid - 1; 
        } else if arr[mid] < target {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    result
}

fn main() {
    let arr = [1, 2, 3, 3, 3, 4, 5, 6];
    let target = 3;
    match first_occurrence_index(&arr, target) {
        Some(index) => println!("First occurrence of {} is at index {}", target, index),
        None => println!("{} not found in the array", target),
    }
}
3. Given a string of words, implement a function that returns the shortest word in the string.
Ans->fn shortest_word(input: &str) -> Option<&str> {
    input.split_whitespace().min_by_key(|word| word.len())
}

fn main() 
    let input = "The quick brown fox jumps over the lazy dog";
    if let Some(shortest) = shortest_word(input) {
        println!("The shortest word is: {}", shortest);
    } else {
        println!("No words found in the input.");
    }
}
4. Implement a function that checks whether a given number is prime or not.
Ans->use std::io;
fn is_prime(num: u64) -> bool {
    if num <= 1 {
    }
    for i in 2..=(num as f64).sqrt() as u64 {
        if num % i == 0 {
            return false; 
        }
    }
    true 
}

fn main() {
    println!("Welcome to the Prime Number Checker!");

    loop {
        println!("Please enter a positive integer (or enter 'q' to quit):");

        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");

        if input.trim().eq_ignore_ascii_case("q") {
            println!("Goodbye!");
            break;
        }
        let num: u64 = match input.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("Invalid input. Please enter a valid positive integer.");
                continue;
            }
        };

        if is_prime(num) {
            println!("{} is prime", num);
        } else {
            println!("{} is not prime", num);
        }
    }
}
5. Given a sorted array of integers, implement a function that returns the median of the array.
Ans-> use std::io;

fn median(numbers: &[i32]) -> Option<f64> {
    let len = numbers.len();
    if len == 0 {
        return None;
    }
    let mid = len / 2;
    if len % 2 == 0 {
        let left = numbers[mid - 1];
        let right = numbers[mid];
        Some(f64::from(left + right) / 2.0)
    } else {
    Some(f64::from(numbers[mid]))
    }
}
fn main() {
    println!("Welcome to the Median Calculator!");
    loop {
        println!("Please enter a list of integers separated by spaces (or enter 'q' to quit):");

        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");

        if input.trim().eq_ignore_ascii_case("q") {
            println!("Goodbye!");
            break;
        }
        let numbers: Vec<i32> = input
            .split_whitespace()
            .filter_map(|s| s.parse().ok())
            .collect();
        match median(&numbers) {
            Some(result) => println!("Median: {}", result),
            None => println!("Please enter at least one integer."),
        }
    }
}
6. Implement a function that finds the longest common prefix of a given set of strings.
Ans->fn longest_common_prefix<'a>(words: &'a [&'a str]) -> &'a str {
    if words.is_empty() {
        return "";
    }
    let mut prefix = words[0];
    for &word in &words[1..] {
        prefix = common_prefix(prefix, word);
    }
    prefix
}
fn common_prefix<'a>(a: &'a str, b: &'a str) -> &'a str {
    let len = a.len().min(b.len());
    let common_len = a.chars().zip(b.chars()).take_while(|(ca, cb)| ca == cb).count();
    &a[..common_len]
}
fn main() {
    let words = vec![
        "techie delight",
        "tech",
        "techie",
        "technology",
        "technical",
    ];

    let result = longest_common_prefix(&words);
    println!("The longest common prefix is: {}", result);
}
7. Implement a function that returns the kth smallest element in a given array.
Ans->fn kth_smallest(arr: &Vec<i32>, k: usize) -> i32 {
    let mut low = *arr.iter().min().unwrap();
    let mut high = *arr.iter().max().unwrap();
    while low < high {
        let mid = low + (high - low) / 2;
        let count = arr.iter().filter(|&&x| x <= mid).count();
        if count < k {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    low
}
fn main() {
    let nums = vec![1, 4, 5, 3, 19, 3];
    let k = 3;
    let result = kth_smallest(&nums, k);
    println!("K'th smallest element is {}", result);
}
8. Given a binary tree, implement a function that returns the maximum depth of the tree.
Ans-> use std::{io, rc::Rc, cell::RefCell};
#[derive(Debug, PartialEq, Eq)]
struct TreeNode {
    val: i32,
    left: Option<Rc<RefCell<TreeNode>>>,
    right: Option<Rc<RefCell<TreeNode>>>,
}
impl TreeNode {
    fn new(val: i32) -> Self {
        TreeNode { val, left: None, right: None }
    }
}
fn input_integer() -> i32 {
    loop {
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Failed to read line");
        if let Ok(num) = input.trim().parse() {
            return num;
        } else {
            println!("Invalid input. Please enter an integer:");
        }
    }
}
fn build_tree() -> Option<Rc<RefCell<TreeNode>>> {
    println!("Enter the value for the current node (or -1 to skip):");
    let val = input_integer();
    if val == -1 {
        return None;
    }
    let node = Rc::new(RefCell::new(TreeNode::new(val)));
    println!("Enter the left child of {}: ", val);
    node.borrow_mut().left = build_tree();
    println!("Enter the right child of {}: ", val);
    node.borrow_mut().right = build_tree();
    Some(node)
}
fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {
    match root {
        Some(node) => {
            let node = node.borrow();
            1 + std::cmp::max(max_depth(node.left.clone()), max_depth(node.right.clone()))
        }
        None => 0,
    }
}
fn main() {
    println!("Please create the binary tree:");
    let root = build_tree();
    let depth = max_depth(root);
    println!("Maximum depth of the binary tree: {}", depth);
}
9. Reverse a string in Rust
Ans->fn reverse_alternate(initial: &str) -> String {
    let chars: Vec<char> = initial.chars().collect();
    let mut reversed = String::new();
    let mut index = initial.len() - 1;
    loop {
        reversed.push(chars[index]);
        if index == 0 {
            break;
        }
        index -= 1;
    }
    reversed
}
fn main() {
    let reversed = reverse_alternate("SHUBHAM");
    println!("{reversed}");
}
10. Check if a number is prime in Rust
Ans->use std::io;

fn main() {
    let mut input = String::new();
    println!("Enter a number: ");
    io::stdin().read_line(&mut input).expect("Failed to read line");

    let number: u32 = match input.trim().parse() {
        Ok(num) => num,
        Err(_) => {
            println!("Invalid input. Please enter a valid number.");
            return;
        }
    };

    if is_prime(number) {
        println!("{} is a prime number", number);
    } else {
        println!("{} is not a prime number", number);
    }
}

fn is_prime(n: u32) -> bool {
    if n <= 1 {
        return false;
    }

    for i in 2..=n / 2 {
        if n % i == 0 {
            return false;
        }
    }

    true
}
11. Merge two sorted arrays in Rust
Ans->fn main() {
    let mut nums1 = vec![1, 2, 3, 0, 0, 0];
    let m = 3;
    let nums2 = vec![2, 5, 6];
    let n = 3;
    let mut i1 = m;
    let mut i2 = n;
    let mut insert_pos = m + n - 1;
    while i1 > 0 && i2 > 0 {
        if nums1[i1 - 1] > nums2[i2 - 1] {
            nums1[insert_pos] = nums1[i1 - 1];
            i1 -= 1;
        } else {
            nums1[insert_pos] = nums2[i2 - 1];
            i2 -= 1;
        }
        insert_pos -= 1;
    }
    while i2 > 0 {
        nums1[insert_pos] = nums2[i2 - 1];
        i2 -= 1;
        insert_pos -= 1;
    }
    println!("Merged array: {:?}", nums1);
}
12. Find the maximum subarray sum in Rust
Ans->fn find_max_subarray_sum(arr: &[i32]) -> i32 {
    let mut max_sum = arr[0];
    let mut current_sum = arr[0];

    for &num in arr.iter().skip(1) {
        current_sum = current_sum.max(0) + num;
        max_sum = max_sum.max(current_sum);
    }
    max_sum
}
fn main() {
    let array = vec![-2, 1, -3, 4, -1, 2, 1, -5, 4];
    let max_subarray_sum = find_max_subarray_sum(&array);
    println!("The maximum subarray sum is: {}", max_subarray_sum);
}
